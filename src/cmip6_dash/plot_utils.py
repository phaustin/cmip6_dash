import cartopy.feature as cf
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

from .wrangling_utils import get_cmpi6_model_run
from .wrangling_utils import get_month_and_year
from .wrangling_utils import get_var_key


def get_outline(fig):
    """Takes a figure and adds cartopy's coastline geometries on it"""
    x_coords = []
    y_coords = []
    for coord_seq in cf.COASTLINE.geometries():
        x_coords.extend([k[0] for k in coord_seq.coords] + [np.nan])
        y_coords.extend([k[1] for k in coord_seq.coords] + [np.nan])
    fig.add_trace(
        go.Scatter(x=x_coords, y=y_coords, mode="lines", line=dict(color="#FFFFFF"))
    )

    return fig


def plot_year_plotly(dset, var_id, mod_id, month, year, exp_id, layer=1):
    """This function plots the var for a given month and year

    Wraps plotly plotting code for a one month, year slice of cmpi-6 climate model
     output for the given variable

    Parameters
    ----------
    dset : xarray.Dataset
        The xarray.Dataset to plot
    var_id : 'str'
        The variable to be plotted.
    month : 'str'
        String specifying which month to plot.
        Must be between '01'-'12'. 0 required for single digit months.
    year : 'str'
        Year to plot. Must be between '1850' and '2014'
    exp_id : 'str'

    layer : int
        Must be between 0 and 18- only used for plotting humidity and temp

    Returns
    -------
    fig : plotly figure object
    """
    var_data = get_month_and_year(dset, var_id, month, year, exp_id, layer)

    var_key = get_var_key()

    # Selecting along the first member dimension if this is a multi-member set
    # Can be tweaked to average etc. in future
    if "member_num" in var_data.dims:
        var_data = var_data.sel(member_num=0)

    # Converting to a df so we can use plotly
    var_df = var_data.to_dataframe().reset_index()

    # Converting from a 0-360 longitudinal system to a -180-180 longitudinal system
    var_df["lon_adj"] = var_df["lon"].apply(lambda x: x - 360 if x > 180 else x)

    # Invisible plotly express scatter of var values at lons and lats. Added
    # this here to get the box and lasso select to do the mean/ variance.
    # A bit of a hack but seems to be the best option currently.
    fig = px.scatter(var_df, x="lon_adj", y="lat", color=var_id, opacity=0)
    # Removing the color bar generated by plotly express
    fig.update_layout(coloraxis_showscale=False)

    # Adding cartopy features to our plot
    fig = get_outline(fig)

    fig.add_trace(
        go.Contour(
            x=var_df["lon_adj"],
            y=var_df["lat"],
            z=var_df[var_id],
            contours_coloring="heatmap",
            colorbar={
                "borderwidth": 0,
                "outlinewidth": 0,
                "thickness": 15,
                "tickfont": {"size": 14},
                "title": var_key[var_id]["units"],
            },  # specifies units here
            # Sizing and spacing of contours can be changed by editing these
            # commented out options
            contours={
                # "end": 4,
                "showlines": False,
                # "size": 0.5, #this is your contour interval
                # "start": -4
            },
        )
    )
    # Updating the axis to the min and max of lat and lon so we get autozoom for cases
    fig.update_xaxes(
        range=[var_df["lon_adj"].min(), var_df["lon_adj"].max()],
        showticklabels=False,
        visible=False,
    )
    fig.update_yaxes(
        range=[var_df["lat"].min(), var_df["lat"].max()],
        showticklabels=False,
        visible=False,
    )

    # Title doesn't actually end up visible with these margins
    # instead the title of the card is specified via callback to the title of the card
    # this plot
    # lives in on the dashboard
    fig.update_layout(
        margin={"r": 0, "t": 0, "l": 0, "b": 0},
        title=var_key[var_id]["fullname"] + " " + year + "-" + month + " " + mod_id,
    )

    return fig


def plot_model_comparisons(dsets, var_id, mod_id, mod_comp_id="CanESM5"):
    """Plots a histogram comparing counts of different var_id values between two models
        for a given year

    Parameters
    ----------
    dsets : tuple
        The two xarray.Dataset to plot. Should be the same set of vars except for the
        different models.
    var_id : 'str'
        The variable to be plotted.
    mod_id : 'str
        The model id to be plotted
    month : 'str'
        String specifying which month to plot.
        Must be between '01'-'12'. 0 required for single digit months.
    year : 'str'
        Year to plot. Must be between '1850' and '2014'
    mod_comp_id : str, optional
        model to compare model specified by mod_id to, by default "CanESM5"

    Returns
    -------
    plotly figure object
        Plotly figure plot

    """
    # Translating both xarray inputs to pandas dfs
    df = dsets[0].to_dataframe().reset_index()
    df_comp = dsets[1].to_dataframe().reset_index()

    # Changing the column labels on the var_ids to be the model ids so we can melt
    # i.e get everything into one pandas dataframe for plotting
    df_comp = df_comp.rename({var_id: mod_comp_id}, axis=1)[[mod_comp_id]]
    df = df.rename({var_id: mod_id}, axis=1)[[mod_id]]
    uni_df = pd.concat([df, df_comp], axis=1)
    uni_df = uni_df.melt(var_name="model")

    # Plotting counts of different values against each ohter
    fig = px.histogram(
        uni_df,
        x="value",
        color="model",
        histnorm="probability density",
        facet_row="model",
    )

    fig.update_layout(
        margin={"r": 0, "t": 0, "l": 0, "b": 0},
    )
    return fig


def plot_member_line_comp(dset, var_id):
    """Plots mean global climatology for the given multi-member dset

    Dset should be in the case format.

    Parameters
    ----------
    dset : xarray.Dataset
        Should be in the format created by case utils
    var_id : str
        The var id to use

    Returns
    -------
    fig : plotly figure object

    """
    # convert to a pandas dataframe calculate averages by run and time
    df_pd = dset.to_dataframe().reset_index()
    # Assumes the model run dimension is called "member_num"
    df_pd = (
        df_pd.groupby(by=["member_num", "time"])
        .mean()
        .reset_index()[["member_num", "time", var_id]]
    )
    fig = px.line(
        df_pd,
        x="time",
        y=var_id,
        color="member_num",
        title=f"Mean Climatology for {get_var_key()[var_id]['fullname']}",
    )
    fig.update_layout(
        margin={"r": 0, "t": 0, "l": 0, "b": 0},
    )
    return fig


def plotly_wrapper(
    data_store,
    var_id="tas",
    mod_id="CanESM5",
    exp_id="historical",
    month="01",
    year="1950",
    layer=1,
):
    """Wraps model request and plotting code for ease of use"""
    dset = get_cmpi6_model_run(data_store, var_id, mod_id, exp_id)[0]
    fig = plot_year_plotly(dset, var_id, mod_id, month, year, exp_id, layer)
    return fig
